
##########################################################################################
@ object                #   keywords n the new model component section(s)
##########################################################################################

## keyword              default     format  type    #   format is only for controlling the decimal point in the log output
  
name                    ''          ''      str     #   object name (just a note for you, not used for anything)
note                    ''          ''      str     #   comments on the object (not implemented yet)

image                   ''          ''      str     #   data image name (separated by a comma if more than one are supplied)
error                   ''          ''      str     #   error image name (separated by a comma if more than one are supplied)
mask                    ''          ''      str     #   mask image name (separated by a comma if more than one are supplied)
psf                     ''          ''      str     #   psf image name (separated by a comma if more than one are supplied)
bmaj                    None        ''      float   #   bmaj, for overriding whatever in the image header 
bmin                    None        ''      float   #   bmaj, for overriding whatever in the image header
bpa                     None        ''      float   #   bmaj, for overriding whatever in the image header
samp                    ''          ''      str     #   sampling table

vis                     ''          ''      str     #   vis-ms name (separated by a comma if more than one are supplied)

pmodel                  ''          ''      str     #   prior image name (separated by a comma if more than one are supplied)

type                    ''          ''      str     #   not implemented yet
xypos                   [0.0,0.0]   '.7f'   list    #   [ra,dec] in degree
xypos_kin               [0.0,0.0]   '.7f'   list    #   [ra,dec] in degree for the kinematical center if different from the geometric center

z                       0.0         '.3f'   float   #   redshift
vsys                    0.0         '.2f'   float   #   km/s galaxy systematic velocity in respective to the redshift

pa                      0.0         '.2f'   float   #   Pa of the receding half major axis of the projected disk plane
inc                     0.0         '.2f'   float   #   disk plane inclination

restwave                1000.0      ''      float   #   line rest wavelength (angstrom)
restfreq                100.0       ''      float   #   Ghz line rest frequency

method                  'kinmspy'   ''      str     #   underline simulation algorithm 
                                                    #   available options are: disk2d,kinmspy

intflux                 1.0         '.2f'   float   #   Jy x km/s or dataunits * angstrom
sbser                   [1.0,1.0]   '.2f'   list    #   [half-light-radius, sersic-index]

ge_pa           90.0
ge_q             2.0

####    method='kinmspy'

vrad                    [0.0,0.1]   '.2f'   list    #   radial knots in galactocentric distance (for velocity and dispersion vector)

vrot                    [100,100]   '.2f'   list    #   rotational velocity radial profile
                                                    #
                                                    #   some "advanced" options available:
                                                    #
                                                    #   (math_expr/options,p1,p2...)    :   tuple
                                                    #   one can use math expressions to specify a descriptional RC (numpy supported),
                                                    #   or select the options of building RC from a mass-potential->dynamical model
                                                    #
                                                    #   math expression exmaples:
                                                    #        +  linear increasing to vmax=200 at 0.2" then flat RC
                                                    #           vrot <<< ("minimum(vard/p2,1)*p1",200,0.2)                                                    
                                                    #        +  vrot=2/pi*vmax*arctan(vrad/rt)
                                                    #           vrot <<< ('p1*2/pi*arctan(vrad/p2)',200,0.2)
                                                    #                <<< ('arctan',vmax,rt) # built-in shortcut
                                                    #        +  vrot=vmax*(1-exp(-vrad/rt))
                                                    #           vrot <<< ('p1*(1-exp(-vrad/p2))',200,0.2)
                                                    #                <<< ('exp',200,0.2)    # built-in shortcut
                                                    #        +  vrot=vmax*tanh(vrad/rt)
                                                    #           vrot <<< ('p1*tanh(vrad/p2)',200,0.2)
                                                    #                <<< ('tanh',200,0.2)   # built-in shortcut
                                                    #   dynamical model examples:
                                                    #        +  using a dynamical model specified from the parameter section 'halodisk'
                                                    #           vrot <<< ('dynamics','halodisk')
                                                    
vdis                    [10.0,10.0] '.2f'   list    #   velocity dispersion radial profile

####    method='disk2d'                                                    

alpha                   0.0         '.2f'   float   #   
                                                    
##########################################################################################
@ dynamics              #   keywords in the dynamics-prescription section
##########################################################################################

disk_sd                 0.0                 float   #   msun/kpc^2.0               
disk_rs                 1.0                 float   #   kpc
halo_ms                 5e10                float   #   msun
halo_a                  100.0               float   #   kpc
halo_conv               4.0                 float   #
halo_mvir               0.5                 float   #   10.^12 msun

##########################################################################################
@optimize               #   keywords for the optimization configuration
##########################################################################################

method                  'amoeba'            str     #   underline parameter optimization algorithm
                                                    #   options: amoeba,lmfit-nm,lmfit-brute,emcee
outname_replace         []                  list    #   list of two-element tuple
outname_exclude         []                  list    #   list of string
outdir                  'testdir'           str     #   output dir path

parname@objectname      ('o',-1,1,0.0)      tuple   #   3-/4-element tuple for a free parameter
                                                    #   this could be something like:
                                                    #   ('a',-100,100,1.0)  par-boundary = (-100,100) (a: "absolute" scaling)
                                                    #   ('o',-100,100,1.0)  par-boundary = (p_start-100,p_start+100) ("o": "offset" scaling)
                                                    #   ('r',0.2,2.0)       par-boundary = (p_start*0.2,p_start*2.0) ("r": "relative" scaling)
                                                    #   (-100,100,1.0)      if no scaling keyword is provided, default to "absolute" scaling

parname[a:b]@obectname  ('o',-1,1,0.0)      tuple   #   same as above, but a slicing index is applied when the parameter is an iteration object (e.g. vrot)
                                                    #   then all elements in the sliced parameter set is tied to be the same as a single free parameter
                                                    #   e.g., vrot[2:5]@co21disk: the rotational velocity of the third, fourth, fifth radial knots within disk object "co21disk"


##########################################################################################
@ comments
##########################################################################################

+ The usage of "#":

    "#" marks the beginning of inline comments or commented line: i.a. anything behind it will not be read by the program

+ The usages of "@":

    + any line begins with '@' mark the beginning of a new section (as in this file)
        
        The section name is created from valid characters (ignoring comments) following  "@", with leading/trailing space removed
        some section names are reserved for special purposes:
            + A name containing "comment", "changelog", "ignore" is considered as comments and the content in that section will be discarded by the program
            + A name containing "optimize" denote the parameter section control the optimization. 
            + A name not meeting the above standard will be considered as a model component

    + denote the "parent" object of a parameter:
        e.g. "pa@co21disk" = the position angle of the disk object "co21disk"

    + tie the parameter values:
        
        when a parameter value is set to a string containing "@", it means its value is tied to a math expression of some other parameter(s)
        e.g.    if 'vdis@co21disk' is assigned to 'vdis' in the object '@co10disk' parameter section, 
                then the value of 'vdis@co10disk' is always tied to that of 'vdis@co21disk' in modeling.
                if '2.*influx@line1' is assigned to 'intflux' in the object '@line2' parameter section,
                then the value of 'intflux@line2' is always twice of 'flux@line1'

+ keyword-value pair

    Under each section, each line always follow the keyword+value pair syntax, separated by white space
    The first word is considered as the parameter "keyword", and the rest of the line will be considered as the value content.
    The "value" part in .inp needs to be the string representation of a Python object, e.g.:
        'test'      :   a string type with a value of "test"
        3.0         :   a float type with a value of 3.0
    The program uses eval() to determine the value content and type (which is actually not a good practice in Python...)
    
    note: if the eval() step fails, the program will:
        do split() -> re-evaluate on each element -> assemble the results into a list -> assign the list to the keyword
        This feature is only designed to work with the file you're looking at right now.  
